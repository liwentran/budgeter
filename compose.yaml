# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: app
      target: budgeter-server
    command: python3 /app/server/budgeter.py
    ports:
      - 50051:50051
    secrets:
      - db-password
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "/bin/grpc_health_probe",
          "-addr=localhost:50051"
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s

  client:
    build:
      context: app
      target: budgeter-client
    command: python3 /app/client/budgeter_client.py
    depends_on:
      server:
        condition: service_healthy
    restart: on-failure:3

  db:
    image: postgres
    restart: always
    # overrides the user used to run the container process
    user: postgres
    secrets:
      - db-password
    volumes:
      # mount db-data volume at the /var/lib/postgresql/data container path
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    # Remove later
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  # The `db-data` volume persists the database data between container restarts
  db-data:


secrets:
  # used to set the database password
  db-password:
    file: db/password.txt
